# Preview Deployment Workflow
# Requirements addressed:
# - Development Environment: Preview deployment pipeline with automated testing and validation for pull requests
# - Deployment Pipeline: Preview stage deployment with automated testing and performance validation

name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

jobs:
  # Import test job from ci.yml workflow
  test:
    uses: ./.github/workflows/ci.yml@main
    secrets: inherit

  preview_deploy:
    runs-on: ubuntu-latest
    environment: preview
    needs: [test]
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3.5.3

      - name: Setup Node.js
        uses: actions/setup-node@v3 # v3.7.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2 # v2.4.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd src/web
          pnpm install --frozen-lockfile

      - name: Build application
        run: |
          cd src/web
          pnpm build

      - name: Deploy to Vercel Preview
        id: deploy
        uses: vercel/actions/deploy@v3 # v3.8.2
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  preview_health_check:
    runs-on: ubuntu-latest
    needs: [preview_deploy]
    
    steps:
      - name: Wait for deployment
        run: sleep 30 # Allow time for preview deployment to stabilize

      - name: Verify preview deployment
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.preview_deploy.outputs.preview-url }})
          if [ $STATUS_CODE -ne 200 ]; then
            echo "Preview deployment health check failed with status code: $STATUS_CODE"
            exit 1
          fi

      - name: Check preview API health
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.preview_deploy.outputs.preview-url }}/api/health)
          if [ $STATUS_CODE -ne 200 ]; then
            echo "API health check failed with status code: $STATUS_CODE"
            exit 1
          fi

      - name: Setup Node.js for Lighthouse
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Validate preview performance
        run: |
          lighthouse ${{ needs.preview_deploy.outputs.preview-url }} \
            --output json \
            --output-path=./lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox --disable-gpu"

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: lighthouse-report.json
          retention-days: 14

      - name: Check Lighthouse scores
        run: |
          PERFORMANCE_SCORE=$(jq '.categories.performance.score' lighthouse-report.json)
          if (( $(echo "$PERFORMANCE_SCORE < 0.7" | bc -l) )); then
            echo "Performance score below threshold: $PERFORMANCE_SCORE"
            exit 1
          fi

      - name: Post results to PR
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('./lighthouse-report.json', 'utf8'));
            
            const scores = {
              performance: Math.round(report.categories.performance.score * 100),
              accessibility: Math.round(report.categories.accessibility.score * 100),
              bestPractices: Math.round(report.categories['best-practices'].score * 100),
              seo: Math.round(report.categories.seo.score * 100)
            };
            
            const comment = `## Preview Environment Performance Report
            
            | Metric | Score |
            |--------|-------|
            | Performance | ${scores.performance}% |
            | Accessibility | ${scores.accessibility}% |
            | Best Practices | ${scores.bestPractices}% |
            | SEO | ${scores.seo}% |
            
            Preview URL: ${{ needs.preview_deploy.outputs.preview-url }}`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });